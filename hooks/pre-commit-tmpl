#!/usr/bin/env bash
<<DISCLAIMER
Copyright [2022] [Ben, Po-Chen CHEN (@benbenbang)]

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an 'AS IS' BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Author: Ben, Po-Chen CHEN (@benbenbang)
License: APACHE LICENSE, VERSION 2.0
Status: Production

Maintainer:
- @benbenbang
DISCLAIMER

GITROOT=$(git rev-parse --show-toplevel)
PRE_COMMIT_HOOK_BIN="%(COMMIT_HOOK_BINARY_PATH)s"
BIN_OK=$(which $PRE_COMMIT_HOOK_BIN 2>/dev/null || echo false)

ERROR='\033[0;31m'
WARNING='\033[1;33m'
INFO='\033[0;36m'
DEBUG='\033[1;32m'
RESET='\033[0m'

if [[ $BIN_OK == false ]]; then
    echo -e "${ERROR}\`pre-commit\` not found.  Did you forget to activate your virtualenv?${RESET}"
    exit 1
else
    if [[ ! -z $PRE_COMMIT_DEBUG ]]; then
        echo -e "${WARNING}Using pre-commit binary: $PRE_COMMIT_HOOK_BIN${RESET}";
    fi
fi

function get_path(){
    local PRE_COMMIT_FILE

    if [[ -d $1 ]]; then
        PRE_COMMIT_FILE="${1}/.pre-commit-config.yaml"
    else
        if [[ $1 =~ ".pre-commit-config.yaml" ]]; then
            PRE_COMMIT_FILE="$(dirname $(dirname ${1}))/.pre-commit-config.yaml"
        else
            PRE_COMMIT_FILE="$(dirname ${1})/.pre-commit-config.yaml"
        fi
    fi

    echo $(realpath -sm $PRE_COMMIT_FILE)
}

function find_conf(){
    local PRE_COMMIT_FILE=$(get_path "$(realpath -sm $1)")

    while [[ $(dirname $PRE_COMMIT_FILE) != $GITROOT ]]; do
        if [[ -f $PRE_COMMIT_FILE ]]; then
            echo "$PRE_COMMIT_FILE"
            return
        else
            PRE_COMMIT_FILE=$(get_path $PRE_COMMIT_FILE)
        fi
    done

    echo ".pre-commit-config.yaml"
}

function run_hook(){
    declare -A CHANGED

    if [[ $RUN_CI_HOOK ]]; then
        echo -e "üë∑üèª‚Äç‚ôÇÔ∏è ${WARNING}Running CI hook.. Checking ${CI_DEFAULT_BRANCH}..${CI_COMMIT_SHA}${RESET}"
        IFS=$'\n' FILES=$(git diff-tree --no-commit-id --name-only -m -r "${CI_DEFAULT_BRANCH}" "${CI_COMMIT_SHA}")
        if [[ ! -z $PRE_COMMIT_DEBUG ]]; then
            echo -e "‚ÑπÔ∏è  ${DEBUG}All changed file: ${FILES}${RESET}"
        fi
    else
        IFS=$'\n' FILES=$(git diff --name-only --cached)
    fi

    for file in $FILES; do
        CONF=$(find_conf $file)
        if [[ -v CHANGED[$CONF] ]]; then
            CHANGED[$CONF]="${CHANGED[$CONF]} $file"
        else
            CHANGED[$CONF]=$file
        fi
    done

    for key in ${!CHANGED[@]}; do
        echo -e "üìù ${INFO}Checking: ${CHANGED[$key]} ‚ûú associated config: $key${RESET}"
        eval "$PRE_COMMIT_HOOK_BIN run --files ${CHANGED[$key]} -c $key || exit -1"
    done

    # debug:
    if [[ ! -z $PRE_COMMIT_DEBUG ]]; then
        echo -e "${DEBUG}config dictionary: ([${!CHANGED[@]}]=${CHANGED[@]})${RESET}"
    fi
}

run_hook
